/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Exceptions.EmptyBankException;
import Exceptions.NotFoundItemException;
import JavaBeans.ConexaoBD;
import JavaBeans.Produto;
import TableModels.TableModelAdicionarProduto;
import TableModels.TableModelSelecionados;
import TableModels.TableModelSelecionadosCompra;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

/**
 *
 * @author Danielle
 */
public class AdicionarProduto extends javax.swing.JFrame implements TableModelListener {

    private JFrame parent;
    ConexaoBD conexao = new ConexaoBD();
    ArrayList<Produto> lista;
    ArrayList<Produto> listaSelecionados;
    ArrayList<Produto> produtos;
    Produto produto;
    int tela;

    public AdicionarProduto(int tela, JFrame p) {
        this.tela = tela;
        initComponents();
        this.setLocationRelativeTo(null);
        this.parent = p;
        lista = new ArrayList<Produto>();
        produtos = new ArrayList<Produto>();
        listaSelecionados = new ArrayList<Produto>();
        iniciarTabelas();
        jScrollPane1.getViewport().setBackground(Color.white);
        jScrollPane2.getViewport().setBackground(Color.white);
    }

    public AdicionarProduto(int tela, JFrame p, ArrayList<Produto> produtos) {
        this.lista = produtos;
        this.tela = tela;
        initComponents();
        this.parent = p;
        lista = new ArrayList<Produto>();
        this.produtos = produtos;
        listaSelecionados = new ArrayList<Produto>();
        iniciarTabelas();
        jScrollPane1.getViewport().setBackground(Color.white);
        jScrollPane2.getViewport().setBackground(Color.white);
    }

    public void iniciarTabelas() {
        try {
            if (tela == 1) {
                lista = conexao.getEstoque(2);
                TableModelSelecionados modelo2 = new TableModelSelecionados(listaSelecionados);
                selecionados.setModel(modelo2);
            } else {
                lista = conexao.getEstoque(1);
                if (!produtos.isEmpty()) {
                    int i = 0;
                    int size = produtos.size();
                    while (size != 0) {
                        lista.remove(conexao.getProdutoCodigo(produtos.get(i).getCodp()));
                        i++;
                        size--;
                    }
                }
                TableModelSelecionadosCompra modelo2 = new TableModelSelecionadosCompra(listaSelecionados);
                selecionados.setModel(modelo2);
            }
            TableModelAdicionarProduto modelo = new TableModelAdicionarProduto(lista);
            listaProdutos.setModel(modelo);
            listaProdutos.getColumnModel().getColumn(0).setPreferredWidth(5);
        } catch (NotFoundItemException ex) {
            JOptionPane.showMessageDialog(null, "Esse nome não está cadastrado no sistema!", "ERRO!", JOptionPane.ERROR_MESSAGE);
        } catch (EmptyBankException ex) {
            JOptionPane.showMessageDialog(null, "Não há dados cadastrados no sistema!", "AVISO!", JOptionPane.INFORMATION_MESSAGE);
        }

    }

    public void tableChanged(TableModelEvent e) {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        selecionados = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaProdutos = new javax.swing.JTable();
        adicionar = new javax.swing.JButton();
        remover = new javax.swing.JButton();
        salvar = new javax.swing.JButton();
        voltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Adicionar Produtos");
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Selecionar Produtos"));

        selecionados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Código", "Nome", "Indique a Qtd:"
            }
        ));
        jScrollPane1.setViewportView(selecionados);

        listaProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Código", "Nome"
            }
        ));
        jScrollPane2.setViewportView(listaProdutos);

        adicionar.setText(">>");
        adicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarActionPerformed(evt);
            }
        });

        remover.setText("<<");
        remover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(adicionar)
                    .addComponent(remover))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(adicionar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(remover)))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        salvar.setText("Adicionar");
        salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarActionPerformed(evt);
            }
        });

        voltar.setText("Voltar");
        voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(249, 249, 249)
                .addComponent(salvar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(voltar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salvar)
                    .addComponent(voltar))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarActionPerformed
        dispose();
    }//GEN-LAST:event_voltarActionPerformed

    private void adicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarActionPerformed
        int linha = listaProdutos.getSelectedRow();
        if (linha != -1) {
            TableModelAdicionarProduto model = (TableModelAdicionarProduto) listaProdutos.getModel();
            produto = model.getProduto(linha);
            model.removeProduto(linha);
            listaProdutos.setModel(model);
            if (tela == 1) {
                TableModelSelecionados model2 = (TableModelSelecionados) selecionados.getModel();
                model2.addProduto(produto);
                selecionados.setModel(model2);
            } else {
                TableModelSelecionadosCompra model2 = (TableModelSelecionadosCompra) selecionados.getModel();
                model2.addProduto(produto);
                selecionados.setModel(model2);
            }
        }
    }//GEN-LAST:event_adicionarActionPerformed

    private void removerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerActionPerformed
        int linha = selecionados.getSelectedRow();
        if (linha != -1) {
            if (tela == 1) {
                TableModelSelecionados model2 = (TableModelSelecionados) selecionados.getModel();
                produto = model2.getProduto(linha);
                model2.removeProduto(linha);
                selecionados.setModel(model2);
            } else {
                TableModelSelecionadosCompra model2 = (TableModelSelecionadosCompra) selecionados.getModel();
                produto = model2.getProduto(linha);
                model2.removeProduto(linha);
                selecionados.setModel(model2);
            }
            TableModelAdicionarProduto model = (TableModelAdicionarProduto) listaProdutos.getModel();
            model.addProduto(produto);
            listaProdutos.setModel(model);
        }
    }//GEN-LAST:event_removerActionPerformed

    private void salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarActionPerformed
        lista.removeAll(lista);
        ArrayList<Produto> produtos = new <Produto>ArrayList();;
        int i = 0;
        boolean teste = false;
        if (tela == 1) {
            TableModelSelecionados model2 = (TableModelSelecionados) selecionados.getModel();
            lista = model2.getDadosTabela();
            if (!lista.isEmpty()) {
                int cont = lista.size();
                while (cont != 0) {
                    if (lista.get(i).getQuantidade() == 0) {
                        teste = true;
                    } else {
                        conexao.setProduto(2, lista.get(i));
                    }
                    i++;
                    cont--;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Você precisa selecionar os produtos que serão adicionados!", "ERRO!", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            TableModelSelecionadosCompra model2 = (TableModelSelecionadosCompra) selecionados.getModel();
            produtos = model2.getDadosTabela();
            if (!produtos.isEmpty()) {
                ArrayList<Produto> quantidades = new ArrayList();
                quantidades = model2.getQuantidades();
                int cont = produtos.size();
                while (cont != 0) {
                    if (quantidades.get(i).getQuantidade() == 0) {
                        teste = true;
                    } else {
                        produtos.get(i).setQuantidade(quantidades.get(i).getQuantidade());
                        produtos.get(i).setTotal();
                    }
                    i++;
                    cont--;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Você precisa selecionar os produtos que serão adicionados!", "ERRO!", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (teste == true) {
            JOptionPane.showMessageDialog(null, "Digite as quantidades dos produtos!", "ERRO!", JOptionPane.ERROR_MESSAGE);
        } else {
            if (tela == 1) {
                Estoque estoque = (Estoque) parent;
                estoque.setProdutos(lista);
                dispose();
            } else {
                Comprar comprar = (Comprar) parent;
                comprar.setProdutos(produtos);
                TableModelAdicionarProduto model = (TableModelAdicionarProduto) listaProdutos.getModel();
                model.removeAll(produtos);
                lista.removeAll(lista);
                lista = model.getDados();
                comprar.setFrame(this);
                dispose();
            }
        }
    }//GEN-LAST:event_salvarActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable listaProdutos;
    private javax.swing.JButton remover;
    private javax.swing.JButton salvar;
    private javax.swing.JTable selecionados;
    private javax.swing.JButton voltar;
    // End of variables declaration//GEN-END:variables
}
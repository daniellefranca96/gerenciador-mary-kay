/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Exceptions.EmptyBankException;
import Exceptions.EmptyCampException;
import Exceptions.NotFoundItemException;
import JavaBeans.Cliente;
import JavaBeans.ConexaoBD;
import JavaBeans.Produto;
import TableModels.TableModelEstoque;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Danielle S. França
 */
public class Pesquisar extends javax.swing.JFrame implements ItemListener {

    ArrayList<Produto> listaProduto;
    ArrayList<Cliente> listaCliente;
    Cliente clienteProcurado;
    Produto produtoProcurado;
    boolean testeBanco = false;
    ConexaoBD conexao;

    ;


    public Pesquisar() {
        initComponents();
        setLocationRelativeTo(null);
        jScrollPane1.getViewport().setBackground(Color.white);
        tabela.setBackground(Color.white);
        listaProduto = new <Produto> ArrayList();
        listaCliente = new <Cliente> ArrayList();
        conexao = new ConexaoBD();
        try {
           buscar();
        } catch (NotFoundItemException ex) {
        } catch (EmptyBankException ex) {
        }
        ItemListener listener = new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                try {
                    buscar();
                } catch (NotFoundItemException ex) {
                    limparTabela();
                } catch (EmptyBankException ex) {
                    limparTabela();
                }
            }
        };
        cBuscar.addItemListener(listener);
        UIManager.put("OptionPane.yesButtonText", "Sim");
        UIManager.put("OptionPane.noButtonText", "Não");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    public boolean linhaSelecionada() {
        boolean selecao = false;
        int linha = tabela.getSelectedRow();
        if (linha != -1) {
            selecao = true;
            if (cBuscar.getSelectedIndex() == 0) {
                clienteProcurado = this.listaCliente.get(linha);
            } else {
                produtoProcurado = this.listaProduto.get(linha);
            }
        }
        return selecao;
    }

    public void removerLinha() {
        DefaultTableModel dtm = (DefaultTableModel) tabela.getModel();
        dtm.removeRow(tabela.getSelectedRow());
        dtm.fireTableDataChanged();
        tabela.setModel(dtm);
    }

    public void limparTabela() {
        DefaultTableModel table;
        table = (DefaultTableModel) tabela.getModel();
        table.setNumRows(0);
        testeBanco = false;
    }

    public void excluir() {
        int checar = 0;
        if (cBuscar.getSelectedIndex() == 0) {
            checar = conexao.setCliente(3, clienteProcurado);
        } else {
            checar = conexao.setProduto(3, produtoProcurado);
        }
        if (checar == 1) {
            removerLinha();
        }
    }

    public void buscar() {
        if (cBuscar.getSelectedIndex() == 0) {
            listaCliente.removeAll(listaCliente);
            listaCliente = conexao.getClientes(tnome.getText());
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.setColumnIdentifiers(new String[]{"NOME"});
            for (int i = 0; i < listaCliente.size(); i++) {
                modelo.addRow(new Object[]{this.listaCliente.get(i).getNome()});
            }
            tabela.setModel(modelo);
        } else {
            listaProduto.removeAll(listaProduto);
            listaProduto = conexao.getProduto(tnome.getText());
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.setColumnIdentifiers(new String[]{"NOME"});
            for (int i = 0; i < listaProduto.size(); i++) {
                modelo.addRow(new Object[]{this.listaProduto.get(i).getNome()});
            }
            tabela.setModel(modelo);

        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        nome = new javax.swing.JLabel();
        tnome = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        editar = new javax.swing.JButton();
        cBuscar = new javax.swing.JComboBox();
        excluir = new javax.swing.JButton();
        voltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pesquisa/Exclusão/Edição");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Pesquisar"));

        nome.setText("Nome:");

        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "RESULTADOS"
            }
        ));
        tabela.setGridColor(new java.awt.Color(102, 102, 102));
        tabela.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tabela);

        editar.setText("Visualizar/Editar Item Selecionado");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        cBuscar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cliente", "Produto" }));

        excluir.setText("Excluir Item Selecionado");
        excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(nome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tnome, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(cBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(excluir)
                        .addGap(157, 157, 157))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(editar)
                        .addGap(136, 136, 136))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nome)
                    .addComponent(tnome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscar)
                    .addComponent(cBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(editar)
                .addGap(18, 18, 18)
                .addComponent(excluir)
                .addGap(25, 25, 25))
        );

        voltar.setText("Voltar");
        voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(voltar)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(voltar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        limparTabela();
        try {
            buscar();
        } catch (NotFoundItemException ex) {
            JOptionPane.showMessageDialog(null, "Esse nome não está cadastrado no sistema!", "ERRO!", JOptionPane.ERROR_MESSAGE);
        } catch (EmptyBankException ex) {
            JOptionPane.showMessageDialog(null, "Não há dados cadastrados no sistema!", "AVISO!", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_buscarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        if (linhaSelecionada()) {
            if (cBuscar.getSelectedIndex() == 0) {
                EditarCliente editarCliente = new EditarCliente(clienteProcurado, this);
                editarCliente.setVisible(true);
            } else {
                EditarProduto editarProduto = new EditarProduto(produtoProcurado, this);
                editarProduto.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Você precisa selecionar um item!", "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_editarActionPerformed

    private void voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarActionPerformed
        dispose();
    }//GEN-LAST:event_voltarActionPerformed

    private void excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirActionPerformed
        if (linhaSelecionada()) {
            int res = JOptionPane.showConfirmDialog(null, "Você tem certeza que deseja excluir?", "Aviso!", JOptionPane.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION) {
                linhaSelecionada();
                excluir();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Você precisa selecionar um item!", "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_excluirActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscar;
    private javax.swing.JComboBox cBuscar;
    private javax.swing.JButton editar;
    private javax.swing.JButton excluir;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nome;
    private javax.swing.JTable tabela;
    private javax.swing.JTextField tnome;
    private javax.swing.JButton voltar;
    // End of variables declaration//GEN-END:variables

    @Override
    public void itemStateChanged(ItemEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}

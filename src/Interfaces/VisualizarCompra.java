/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Actions.Imprimir;
import Exceptions.EmptyBankException;
import Exceptions.NotFoundItemException;
import JavaBeans.ConexaoBD;
import JavaBeans.Venda;
import java.awt.Color;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class VisualizarCompra extends javax.swing.JFrame {

    String[] colunas;
    ArrayList<Venda> lista;
    DecimalFormat real;
    ConexaoBD conexao;

    public VisualizarCompra() {
        initComponents();
        setLocationRelativeTo(null);
        jScrollPane1.getViewport().setBackground(Color.white);
        lista = new <Venda> ArrayList();
        real = new DecimalFormat("R$ ,##0.00;(,##0.00)");
        conexao = new ConexaoBD();
        colunas = new String[]{};
        try {
        lista = conexao.listarVendas(6, null, null);
        DefaultTableModel modelo = new DefaultTableModel();
        colunas = new String[]{"CÓDIGO", "DATA", "CLIENTE", "QUANTIDADE", "TOTAL", "PARCELAS"};
        modelo.setColumnIdentifiers(colunas);
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        for (int i = 0; i < lista.size(); i++) {
            String data = formato.format(lista.get(i).getData());
            modelo.addRow(new Object[]{lista.get(i).getCodigoVenda(), data, lista.get(i).getNomeCliente(), lista.get(i).getQuantidade(), real.format(lista.get(i).getTotal()), lista.get(i).getParcelas()});
        }
        tabela.setModel(modelo);
        } catch (NotFoundItemException ex){
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupo = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        diario = new javax.swing.JRadioButton();
        tdiario = new com.toedter.calendar.JDateChooser();
        mensal = new javax.swing.JRadioButton();
        periodoDeterminado = new javax.swing.JRadioButton();
        anual = new javax.swing.JRadioButton();
        dataInicial = new com.toedter.calendar.JDateChooser();
        dataFinal = new com.toedter.calendar.JDateChooser();
        buscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        gerar = new javax.swing.JButton();
        imprimirTabela = new javax.swing.JButton();
        salvarPdf = new javax.swing.JButton();
        voltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relatório de Vendas");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Escolha o período de tempo:"));

        diario.setBackground(new java.awt.Color(255, 255, 255));
        grupo.add(diario);
        diario.setText("Diário:");

        tdiario.setBackground(new java.awt.Color(255, 255, 255));

        mensal.setBackground(new java.awt.Color(255, 255, 255));
        grupo.add(mensal);
        mensal.setText("Mensal");

        periodoDeterminado.setBackground(new java.awt.Color(255, 255, 255));
        grupo.add(periodoDeterminado);
        periodoDeterminado.setText("Entre o perído determinado:");

        anual.setBackground(new java.awt.Color(255, 255, 255));
        grupo.add(anual);
        anual.setText("Anual");

        dataInicial.setBackground(new java.awt.Color(255, 255, 255));

        dataFinal.setBackground(new java.awt.Color(255, 255, 255));

        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        tabela.setAutoCreateRowSorter(true);
        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "CÓDIGO", "DATA", "CLINTE", "QUANTIDADE", "TOTAL", "PARCELAS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tabela.setGridColor(new java.awt.Color(255, 255, 255));
        tabela.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabela);

        gerar.setText("Gerar Gráficos");
        gerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gerarActionPerformed(evt);
            }
        });

        imprimirTabela.setText("Imprimir");
        imprimirTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirTabelaActionPerformed(evt);
            }
        });

        salvarPdf.setText("Salvar PDF");
        salvarPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarPdfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(periodoDeterminado)
                                .addGap(18, 18, 18)
                                .addComponent(dataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(dataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(anual)
                            .addComponent(mensal)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(diario)
                                .addGap(18, 18, 18)
                                .addComponent(tdiario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(buscar))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(gerar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imprimirTabela)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(salvarPdf)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(diario)
                    .addComponent(tdiario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mensal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(anual)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(periodoDeterminado)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gerar)
                    .addComponent(imprimirTabela)
                    .addComponent(salvarPdf))
                .addContainerGap())
        );

        voltar.setText("Voltar");
        voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(288, 288, 288)
                        .addComponent(voltar)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(voltar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        try {
            lista.removeAll(lista);
            if (periodoDeterminado.isSelected()) {
                if (dataInicial.getDate() != null && dataFinal.getDate() != null) {
                    java.sql.Date date1 = new java.sql.Date(dataInicial.getDate().getTime());
                    java.sql.Date date2 = new java.sql.Date(dataFinal.getDate().getTime());
                    lista = conexao.listarVendas(1, date1, date2);
                    DefaultTableModel modelo = new DefaultTableModel();
                    colunas = new String[]{"CÓDIGO", "DATA", "CLIENTE", "QUANTIDADE", "TOTAL", "PARCELAS"};
                    modelo.setColumnIdentifiers(colunas);
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    for (int i = 0; i < lista.size(); i++) {
                        String data = formato.format(lista.get(i).getData());
                        modelo.addRow(new Object[]{lista.get(i).getCodigoVenda(), data, lista.get(i).getNomeCliente(), lista.get(i).getQuantidade(), real.format(lista.get(i).getTotal()), lista.get(i).getParcelas()});
                    }
                    tabela.setModel(modelo);
                } else {
                    JOptionPane.showMessageDialog(null, "Você precisa selecionar uma data!", "ERRO!", JOptionPane.ERROR_MESSAGE);
                }
            } else if (diario.isSelected()) {
                if (tdiario.getDate() != null) {
                    java.sql.Date date = new java.sql.Date(tdiario.getDate().getTime());
                    lista = conexao.listarVendas(2, date, null);
                    DefaultTableModel modelo = new DefaultTableModel();
                    colunas = new String[]{"CÓDIGO", "DATA", "CLIENTE", "QUANTIDADE", "TOTAL", "PARCELAS"};
                    modelo.setColumnIdentifiers(colunas);
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    for (int i = 0; i < lista.size(); i++) {
                        String data = formato.format(lista.get(i).getData());
                        modelo.addRow(new Object[]{lista.get(i).getCodigoVenda(), data, lista.get(i).getNomeCliente(), lista.get(i).getQuantidade(), real.format(lista.get(i).getTotal()), lista.get(i).getParcelas()});
                    }
                    tabela.setModel(modelo);
                } else {
                    JOptionPane.showMessageDialog(null, "Você precisa selecionar uma data!", "ERRO!", JOptionPane.ERROR_MESSAGE);
                }
            } else if (mensal.isSelected()) {
                lista = conexao.listarVendas(4, null, null);
                DefaultTableModel modelo = new DefaultTableModel();
                colunas = new String[]{"ANO", "MÊS", "Nº DE VENDAS", "TOTAL(R$)"};
                modelo.setColumnIdentifiers(colunas);
                for (int i = 0; i < lista.size(); i++) {
                    modelo.addRow(new Object[]{lista.get(i).getCodigoVenda(), lista.get(i).getNomeCliente(), lista.get(i).getQuantidade(), real.format(lista.get(i).getTotal())});
                }
                tabela.setModel(modelo);

            } else if (anual.isSelected()) {
                lista = conexao.listarVendas(3, null, null);
                DefaultTableModel modelo = new DefaultTableModel();
                colunas = new String[]{"ANO", "Nº DE VENDAS", "TOTAL(R$)"};
                modelo.setColumnIdentifiers(colunas);
                for (int i = 0; i < lista.size(); i++) {
                    modelo.addRow(new Object[]{lista.get(i).getNomeCliente(), lista.get(i).getQuantidade(), real.format(lista.get(i).getTotal())});
                }
                tabela.setModel(modelo);

            } else {
                JOptionPane.showMessageDialog(null, "Você tem que selecionar uma opção para realizar a busca!", "ERRO!", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NotFoundItemException ex) {
            JOptionPane.showMessageDialog(null, "Não há compras cadastradas no sistema nesse período!", "ERRO!", JOptionPane.ERROR_MESSAGE);
        } catch (EmptyBankException ex) {
            JOptionPane.showMessageDialog(null, "Não há dados cadastrados no sistema!", "AVISO!", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_buscarActionPerformed

    private void imprimirTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirTabelaActionPerformed
        Imprimir imprimir = new Imprimir(tabela);
    }//GEN-LAST:event_imprimirTabelaActionPerformed

    private void salvarPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarPdfActionPerformed
        Selecionar selecionar = null;
        try {
            selecionar = new Selecionar(tabela, 1, "Compras", colunas);
        } catch (Exception ex) {
            Logger.getLogger(Estoque.class.getName()).log(Level.SEVERE, null, ex);
        }
        selecionar.fechar();
    }//GEN-LAST:event_salvarPdfActionPerformed

    private void gerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gerarActionPerformed
        Graficos grafico = null;
        try {
            grafico = new Graficos();
        } catch (SQLException ex) {
            Logger.getLogger(VisualizarCompra.class.getName()).log(Level.SEVERE, null, ex);
        }
        grafico.setVisible(true);
    }//GEN-LAST:event_gerarActionPerformed

    private void voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarActionPerformed
        dispose();
    }//GEN-LAST:event_voltarActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton anual;
    private javax.swing.JButton buscar;
    private com.toedter.calendar.JDateChooser dataFinal;
    private com.toedter.calendar.JDateChooser dataInicial;
    private javax.swing.JRadioButton diario;
    private javax.swing.JButton gerar;
    private javax.swing.ButtonGroup grupo;
    private javax.swing.JButton imprimirTabela;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton mensal;
    private javax.swing.JRadioButton periodoDeterminado;
    private javax.swing.JButton salvarPdf;
    private javax.swing.JTable tabela;
    private com.toedter.calendar.JDateChooser tdiario;
    private javax.swing.JButton voltar;
    // End of variables declaration//GEN-END:variables
}
